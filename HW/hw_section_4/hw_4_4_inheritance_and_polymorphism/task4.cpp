/*
Реализуйте класс AdvancedVector. Продвинутый вектор отличается от обычного тем, что позволяет обращаться 
по отрицательным индексам к элементам вектора в обратном порядке ( прямо как в Python). 
Например, vec[-1] возвращает последний элемент, vec[-2] возвращает предпоследний и так далее.

Класс AdvancedVector должен хранить элементы шаблонного типа T. 
Требуемый функционал не сильно отличается от стандартного std::vector:

    Класс должен называться AdvancedVector.

    У класса должен быть шаблонный параметр T — тип элементов.

    У класса должен быть конструктор по умолчанию.

    У класса должен быть конструктор копирования (возможно, предоставленный компилятором).

    У класса должен быть шаблонный конструктор, принимающий два итератора и заполняющий вектор из данного диапазона.

    У класса должен быть оператор присваивания (возможно, предоставленный компилятором).

    У класса должны быть операторы сравнения == и !=.

    У класса должны быть константные функции empty() и size().

    У класса должны быть функции pop_back() и push_back(const T&).

    У класса должны быть константная и неконстантная версии оператора [].

В случае положительного индекса нужно вернуть элемент с соответствующим индексом, если он меньше размера вектора. 
Иначе нужно бросить исключение std::out_of_range. 
В случае отрицательного индекса нужно вернуть элемент с соответствующим индексом, 
предполагая, что последний элемент имеет номер − 1 −1, предпоследний − 2 −2 и так далее. 
Но только пока модуль индекса не превосходит size(). 
Если же std::abs(index) > size, то нужно бросить исключение std::out_of_range.
*/